name: CI/CD
on:
  workflow_dispatch:
  push:
    # should only run on feature branches
    # only merge to main via pull request
    branches-ignore: [main]

concurrency:
  group: cicd
  cancel-in-progress: true

jobs:
  # detect-changes:
  #   name: Detect Changes
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Extract branch name
  #       shell: bash
  #       run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  #       id: extract-branch
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ steps.extract-branch.outputs.branch }}
  #         fetch-depth: 0
  #     - name: Check changes on backend
  #       id: check-backend
  #       uses: tj-actions/changed-files@v10
  #       with:
  #         files: |
  #           backend
  #     - name: Check changes on frontend
  #       id: check-frontend
  #       uses: tj-actions/changed-files@v10
  #       with:
  #         files: |
  #           frontend
  #   outputs:
  #     backend: ${{ steps.check-backend.outputs.any_changed }}
  #     frontend: ${{ steps.check-frontend.outputs.any_changed }}

  backend-tests:
    name: Backend Tests
    # needs: [detect-changes]
    # if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    environment:
      name: backend DEV
    env:
      DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
      DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
      DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
      JAVA_MAIL_APP_PASSWORD: ${{ secrets.JAVA_MAIL_APP_PASSWORD }}
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Setup PostgreSQL
        run: |
          sudo service postgresql start
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.DATASOURCE_DB_NAME }}"
          sudo -u postgres psql -c "CREATE USER ${{ secrets.DATASOURCE_USERNAME }} WITH ENCRYPTED PASSWORD '${{ secrets.DATASOURCE_PASSWORD }}'"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DATASOURCE_DB_NAME }} TO ${{ secrets.DATASOURCE_USERNAME }}"
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "17"
          cache: "maven"
      - name: Run Tests
        working-directory: ./backend
        run: "./mvnw clean verify"

  frontend-tests:
    name: Frontend Tests
    # needs: [detect-changes]
    # if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout feature branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "14"
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json
      - name: Build
        working-directory: ./frontend
        run: npm ci --frozen-lockfile
      - name: Run Tests
        working-directory: ./frontend
        run: "npm run test -- --coverage"
      - name: Frontend Codecov Report
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          working-directory: ./frontend
          fail_ci_if_error: true

  frontend-dev:
    name: Deploy Frontend DEV
    needs: [frontend-tests]
    runs-on: ubuntu-latest
    environment:
      name: frontend DEV
      url: ${{ steps.deploy.outputs.preview-url }}
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: "Deploy vercel preview"
        id: deploy
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          # test: confirm if env is sent to deployment
          vercel-args: --prod -b PUBLIC_BACKEND_API_URL=https://veils-dev.herokuapp.com/api/v1
      - name: Update vercel url in secrets
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: "FRONTEND_DEV_URL"
          value: ${{ steps.deploy.outputs.preview-url }}
          token: ${{ secrets.PAT }}

  backend-dev:
    name: Deploy Backend DEV
    needs: [backend-tests]
    runs-on: ubuntu-latest
    environment:
      name: backend DEV
      url: https://veils-dev.herokuapp.com
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          heroku_app_name: veils-dev
          appdir: backend
          branch: ${{ steps.extract-branch.outputs.branch }}
        env:
          # note: "HD_" is needed to specify what to include in the deployed heroku app.
          #       However, it is only needed to differentiate from other environment variables.
          #       The "HD_" string will be stripped when the app starts.
          #       Therefore you need to use "FRONTEND_URL" when accessing from inside the app.
          HD_FRONTEND_URL: https://veils-dev.vercel.app

  e2e-tests:
    name: End-to-End Tests
    needs: [backend-dev, frontend-dev]
    # # always run if either frontend/backend succeed and neither failed
    # if: always() && (needs.backend-dev.result == 'success' || needs.frontend-dev.result == 'success') && (needs.frontend-dev.result != 'failure' && needs.frontend-dev.result != 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout feature branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Skip E2E
        run: echo "SKIPPING end to end tests ..."
      # - name: Cache Cypress
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.cache/Cypress
      #     # we use the exact restore key to avoid Cypress binary snowballing
      #     # https://glebbahmutov.com/blog/do-not-let-cypress-cache-snowball/
      #     key: cypress-${{ runner.os }}-cypress-${{ github.ref }}-${{ hashFiles('**/package.json') }}
      #     restore-keys: |
      #       cypress-${{ runner.os }}-cypress-${{ github.ref }}-${{ hashFiles('**/package.json') }}
      # - name: Setup Node
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: "14"
      #     cache: "npm"
      #     cache-dependency-path: ./e2e-tests/package-lock.json
      # - name: Build
      #   working-directory: ./e2e-tests
      #   run: npm install
      # - name: Run End-to-End Tests
      #   id: run-e2e-tests
      #   uses: cypress-io/github-action@v2
      #   env:
      #     CYPRESS_BASE_URL: https://veils-dev.vercel.app
      #     CYPRESS_BACKEND_URL: https://veils-dev.herokuapp.com/api/v1
      #   with:
      #     wait-on: https://veils-dev.vercel.app/, https://veils-dev.herokuapp.com/check
      #     wait-on-timeout: 180 # wait 3mins for heroku to spin-up
      #     browser: chrome
      #     headless: true
      #     working-directory: ./e2e-tests
      #     install: false # already installed
      #     command: npm test

  create-pull-request:
    name: Create Pull Request
    needs: [e2e-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout feature branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: pull-request
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: "main"
          pr_title: ":tada: ${{ steps.extract-branch.outputs.branch }} :tada:"
          pr_body: |
            Automated PR
          pr_assignee: "johnshift"
          pr_label: "auto-pr"
          github_token: ${{ secrets.GITHUB_TOKEN }}
