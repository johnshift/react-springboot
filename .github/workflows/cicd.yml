name: CI/CD
on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    types: [closed]
  push:
    # should only run on feature branches
    # only merge to main via pull request
    branches-ignore: [main]

concurrency:
  group: tests
  cancel-in-progress: true

jobs:

  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch  
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
          fetch-depth: 0
      - name: Check changes on backend
        id: check-backend
        uses: tj-actions/changed-files@v10
        with:
          files: |
            backend
      - name: Check changes on frontend
        id: check-frontend
        uses: tj-actions/changed-files@v10
        with:
          files: |
            frontend
    outputs:
      backend: ${{ steps.check-backend.outputs.any_changed }}
      frontend: ${{ steps.check-frontend.outputs.any_changed }}

  backend-unit-tests:
    name: Backend Unit Tests
    needs: [detect-changes]
    if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    environment:
      name: backend DEV
    env:
      DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
      DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
      DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Setup PostgreSQL
        run: |
          sudo service postgresql start
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.DATASOURCE_DB_NAME }}"
          sudo -u postgres psql -c "CREATE USER ${{ secrets.DATASOURCE_USERNAME }} WITH ENCRYPTED PASSWORD '${{ secrets.DATASOURCE_PASSWORD }}'"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DATASOURCE_DB_NAME }} TO ${{ secrets.DATASOURCE_USERNAME }}"          
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'maven'
      - name: Run Unit Tests
        working-directory: ./backend
        run: 'mvn clean test'

  backend-integration-tests:
    name: Backend Integration Tests
    needs: [detect-changes]
    if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    environment:
      name: backend DEV
    env:
      DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
      DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
      DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Setup PostgreSQL
        run: |
          sudo service postgresql start
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.DATASOURCE_DB_NAME }}"
          sudo -u postgres psql -c "CREATE USER ${{ secrets.DATASOURCE_USERNAME }} WITH ENCRYPTED PASSWORD '${{ secrets.DATASOURCE_PASSWORD }}'"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DATASOURCE_DB_NAME }} TO ${{ secrets.DATASOURCE_USERNAME }}"          
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'maven'
      - name: Run Integration Tests
        working-directory: ./backend
        run: 'mvn clean test-compile failsafe:integration-test'
        
  frontend-tests:
    name: Frontend Tests
    needs: [detect-changes]
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout feature branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Install pnpm
        working-directory: ./frontend
        run: sudo npm i -g pnpm
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'pnpm'
          cache-dependency-path: ./frontend/pnpm-lock.yaml
      - name: Build
        working-directory: ./frontend
        run: pnpm i --frozen-lockfile
      - name: Run Tests
        working-directory: ./frontend
        run: "pnpm test:ci"

  backend-dev:
    name: Deploy Backend DEV
    needs: [backend-unit-tests, backend-integration-tests]
    runs-on: ubuntu-latest
    environment:
      name: backend DEV
      url: https://offguard-dev.herokuapp.com
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      # - name: Setup Java
      #   uses: actions/setup-java@v2
      #   with:
      #     distribution: 'adopt'
      #     java-version: '11'
      #     cache: 'maven'
      # - name: Build Backend
      #   working-directory: ./backend
      #   run: mvn clean install -DskipTests
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          heroku_app_name: offguard-dev
          appdir: backend
          branch: ${{ steps.extract-branch.outputs.branch }}
        env:
          # note: "HD_" is needed to specify what to include in the deployed heroku app.
          #       However, it is only needed to differentiate from other environment variables.
          #       The "HD_" string will be stripped when the app starts. 
          #       Therefore you need to use "FRONTEND_URL" when accessing from inside the app.  
          HD_FRONTEND_URL: ${{ secrets.FRONTEND_DEV_URL }}

  frontend-dev:
    name: Deploy Frontend DEV
    needs: [frontend-tests]
    runs-on: ubuntu-latest
    environment:
      name: frontend DEV
      url: ${{ steps.deploy.outputs.preview-url }}
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: "Deploy vercel preview"
        id: deploy
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }} 
      - name: Update vercel url in secrets
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'FRONTEND_DEV_URL'
          value: ${{ steps.deploy.outputs.preview-url }}
          token: ${{ secrets.PAT }}

  e2e-tests:
    name: End-to-End Tests
    needs: [backend-dev, frontend-dev]
    # always run if either frontend/backend succeed and neither failed
    if: always() && (needs.backend-dev.result == 'success' || needs.frontend-dev.result == 'success') && (needs.frontend-dev.result != 'failure' && needs.frontend-dev.result != 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: TODO
        run: echo "TODO"
      - name: "TODO: CREATE PR"
        run: echo 'If all e2e tests succeeded, create pr'

  backend-production: # requires approval
    needs: [e2e-tests]
    # this should always run even if create-pr is skipped
    # as long as it matched -> pull_request:main:closed && merged == true
    # and end-to-end tests succeeded
    if: always() && github.event.pull_request.merged == 'true' && needs.e2e-tests.result == 'success'
    name: Deploy Backend PRODUCTION
    runs-on: ubuntu-latest
    environment:
      name: "backend PRODUCTION"
      url: https://offguard.herokuapp.com
    steps:
      - name: TODO
        run: echo "TODO"

  frontend-production:
    needs: [e2e-tests]
    # this should always run even if create-pr is skipped
    # as long as it matched -> pull_request:main:closed && merged == true
    if: always() && github.event.pull_request.merged == 'true' && needs.e2e-tests.result == 'success'
    name: Deploy Frontend PRODUCTION
    runs-on: ubuntu-latest
    environment:
      name: "frontend PRODUCTION"
      url: https://offguard.vercel.app
    steps:
      - name: TODO
        run: echo "TODO"

  