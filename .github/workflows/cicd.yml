name: CI/CD
on:
  workflow_dispatch:
  push:
    # should only run on feature branches
    # only merge to main via pull request
    branches-ignore: [main]

concurrency:
  group: cicd
  cancel-in-progress: true

jobs:

  # detect-changes:
  #   name: Detect Changes
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Extract branch name
  #       shell: bash
  #       run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  #       id: extract-branch
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ steps.extract-branch.outputs.branch }}
  #         fetch-depth: 0
  #     - name: Check changes on backend
  #       id: check-backend
  #       uses: tj-actions/changed-files@v10
  #       with:
  #         files: |
  #           backend
  #     - name: Check changes on frontend
  #       id: check-frontend
  #       uses: tj-actions/changed-files@v10
  #       with:
  #         files: |
  #           frontend
  #   outputs:
  #     backend: ${{ steps.check-backend.outputs.any_changed }}
  #     frontend: ${{ steps.check-frontend.outputs.any_changed }}

  backend-unit-tests:
    name: Backend Unit Tests
    # needs: [detect-changes]
    # if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    environment:
      name: backend DEV
    env:
      DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
      DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
      DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Setup PostgreSQL
        run: |
          sudo service postgresql start
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.DATASOURCE_DB_NAME }}"
          sudo -u postgres psql -c "CREATE USER ${{ secrets.DATASOURCE_USERNAME }} WITH ENCRYPTED PASSWORD '${{ secrets.DATASOURCE_PASSWORD }}'"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DATASOURCE_DB_NAME }} TO ${{ secrets.DATASOURCE_USERNAME }}"
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "17"
          cache: "maven"
      - name: Run Unit Tests
        working-directory: ./backend
        run: "mvn clean test"

  backend-integration-tests:
    name: Backend Integration Tests
    # needs: [detect-changes]
    # if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    environment:
      name: backend DEV
    env:
      DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
      DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
      DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Setup PostgreSQL
        run: |
          sudo service postgresql start
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.DATASOURCE_DB_NAME }}"
          sudo -u postgres psql -c "CREATE USER ${{ secrets.DATASOURCE_USERNAME }} WITH ENCRYPTED PASSWORD '${{ secrets.DATASOURCE_PASSWORD }}'"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DATASOURCE_DB_NAME }} TO ${{ secrets.DATASOURCE_USERNAME }}"
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "17"
          cache: "maven"
      - name: Run Integration Tests
        working-directory: ./backend
        run: "mvn clean test-compile failsafe:integration-test"

  backend-dev:
    name: Deploy Backend DEV
    needs: [backend-unit-tests, backend-integration-tests]
    runs-on: ubuntu-latest
    environment:
      name: backend DEV
      url: https://veils-dev.herokuapp.com
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          heroku_app_name: veils-dev
          appdir: backend
          branch: ${{ steps.extract-branch.outputs.branch }}
        env:
          # note: "HD_" is needed to specify what to include in the deployed heroku app.
          #       However, it is only needed to differentiate from other environment variables.
          #       The "HD_" string will be stripped when the app starts.
          #       Therefore you need to use "FRONTEND_URL" when accessing from inside the app.
          HD_FRONTEND_URL: ${{ secrets.FRONTEND_DEV_URL }}

  create-pull-request:
    name: Create Pull Request
    needs: [backend-dev]
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      - name: Checkout feature branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract-branch.outputs.branch }}
      - name: pull-request
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: "main"
          pr_title: ":tada: ${{ steps.extract-branch.outputs.branch }} :tada:"
          pr_body: |
            Automated PR
          pr_assignee: "johnshift"
          pr_label: "auto-pr"
          github_token: ${{ secrets.GITHUB_TOKEN }}